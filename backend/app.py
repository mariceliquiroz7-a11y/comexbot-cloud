import os
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from typing import List, Dict, Any, Optional
import logging
import re
import random
from datetime import datetime

# Importar el servicio PDF (opcional)
try:
    from backend.services.pdf_service import PDFService
    PDF_SERVICE_AVAILABLE = True
except ImportError as e:
    PDF_SERVICE_AVAILABLE = False
    print(f"‚ö†Ô∏è Servicio PDF no disponible: {e}")

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Crear la aplicaci√≥n FastAPI
app = FastAPI(
    title="ComexBot API - Gratuito Ilimitado",
    description="API especializada en Comercio Exterior del Per√∫ - Sin l√≠mites de conversaciones",
    version="2.0.0"
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # En producci√≥n, especificar dominios espec√≠ficos
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Variable global para el servicio PDF
pdf_service = None

# Modelos Pydantic
class QueryRequest(BaseModel):
    query: str
    pdf_names: Optional[List[str]] = None
    max_results: Optional[int] = 5

class QueryResponse(BaseModel):
    results: List[Dict[str, Any]]
    total_results: int
    query: str

class ChatMessage(BaseModel):
    message: str
    user_id: Optional[str] = "anonymous"

class ChatResponse(BaseModel):
    response: str
    confidence: float = 0.8
    sources: List[str] = []

# ===== SISTEMA DE IA GRATUITA AVANZADA =====
KNOWLEDGE_BASE = {
    "importacion": {
        "keywords": ["importar", "importaci√≥n", "import", "traer productos", "comprar exterior"],
        "responses": [
            """üì¶ **GU√çA COMPLETA DE IMPORTACI√ìN EN PER√ö:**

**Requisitos B√°sicos:**
‚Ä¢ RUC activo y habilitado para comercio exterior
‚Ä¢ Registro como importador en SUNAT
‚Ä¢ P√≥liza de cauci√≥n o garant√≠a bancaria (seg√∫n el caso)

**Documentos Esenciales:**
‚Ä¢ Factura comercial (original)
‚Ä¢ Lista de empaque (Packing List)
‚Ä¢ Conocimiento de embarque (B/L mar√≠timo o Airway Bill a√©reo)
‚Ä¢ Certificado de origen (si aplica preferencias arancelarias)

**Proceso Paso a Paso:**
1Ô∏è‚É£ Negociar con proveedor (INCOTERMS, precios, calidad)
2Ô∏è‚É£ Coordinar env√≠o y documentos
3Ô∏è‚É£ Presentar DAM (Declaraci√≥n Aduanera de Mercanc√≠as)
4Ô∏è‚É£ Pagar tributos (Aranceles, IGV, IPM)
5Ô∏è‚É£ Despacho aduanero y retiro de mercanc√≠a

**Tiempos aproximados:** 7-15 d√≠as h√°biles desde llegada al puerto.

¬øNecesitas informaci√≥n espec√≠fica sobre alg√∫n paso o producto?""",
            
            """üö¢ **IMPORTACI√ìN INTELIGENTE - CONSEJOS PR√ÅCTICOS:**

**Para Principiantes:**
‚Ä¢ Empieza con productos simples (textiles, accesorios)
‚Ä¢ Vol√∫menes peque√±os para ganar experiencia
‚Ä¢ Usa agentes de aduana experimentados

**Optimizaci√≥n de Costos:**
‚Ä¢ Consolida env√≠os para reducir flete
‚Ä¢ Negocia t√©rminos FOB vs CIF
‚Ä¢ Aprovecha reg√≠menes especiales (Drawback, CETICOS)

**Tributos Principales:**
‚Ä¢ **Ad Valorem:** 0% a 17% seg√∫n partida arancelaria
‚Ä¢ **IGV:** 18% sobre (CIF + Arancel)
‚Ä¢ **IPM:** 2% sobre base imponible
‚Ä¢ **ISC:** Solo productos espec√≠ficos (licores, cigarrillos, etc.)

**Documentos Adicionales seg√∫n producto:**
‚Ä¢ DIGESA: Alimentos, cosm√©ticos, productos sanitarios
‚Ä¢ SENASA: Productos agr√≠colas, pecuarios
‚Ä¢ MTC: Veh√≠culos y partes
‚Ä¢ DIGEMID: Productos farmac√©uticos

¬øQu√© tipo de producto planeas importar?"""
        ]
    },
    
    "exportacion": {
        "keywords": ["exportar", "exportaci√≥n", "export", "vender exterior", "enviar productos"],
        "responses": [
            """üåé **GU√çA DE EXPORTACI√ìN DESDE PER√ö:**

**Requisitos B√°sicos:**
‚Ä¢ RUC activo con actividad de exportaci√≥n
‚Ä¢ No requiere registro previo como exportador
‚Ä¢ Factura o boleta de venta del bien

**Documentos Principales:**
‚Ä¢ Declaraci√≥n √önica de Aduanas (DUA)
‚Ä¢ Factura comercial
‚Ä¢ Lista de empaque
‚Ä¢ Documento de transporte
‚Ä¢ Certificados seg√∫n destino y producto

**Proceso de Exportaci√≥n:**
1Ô∏è‚É£ Embalar y rotular mercanc√≠a
2Ô∏è‚É£ Contratar transporte internacional
3Ô∏è‚É£ Presentar DUA en SUNAT
4Ô∏è‚É£ Inspecci√≥n aduanera (si corresponde)
5Ô∏è‚É£ Embarque y env√≠o

**Beneficios Tributarios:**
‚Ä¢ Drawback: Devoluci√≥n 4% del valor FOB
‚Ä¢ Reposici√≥n de mercanc√≠as en franquicia
‚Ä¢ Exportaci√≥n de servicios (exonerada IGV)

**Productos Peruanos Competitivos:**
‚Ä¢ Agroindustriales (quinua, cacao, caf√©)
‚Ä¢ Textiles (algod√≥n pima, alpaca)
‚Ä¢ Miner√≠a y metalurgia
‚Ä¢ Pesca y acuicultura

¬øTienes un producto espec√≠fico en mente para exportar?""",
            
            """‚úàÔ∏è **EXPORTACI√ìN EXITOSA - ESTRATEGIAS AVANZADAS:**

**Investigaci√≥n de Mercados:**
‚Ä¢ Analiza demanda en pa√≠ses objetivo
‚Ä¢ Estudia competencia y precios
‚Ä¢ Verifica barreras arancelarias y no arancelarias

**Canales de Distribuci√≥n:**
‚Ä¢ Venta directa a importadores
‚Ä¢ Agentes comerciales locales
‚Ä¢ Plataformas B2B (Alibaba, Global Sources)
‚Ä¢ Ferias comerciales internacionales

**Aspectos Financieros:**
‚Ä¢ Cartas de cr√©dito para pagos seguros
‚Ä¢ Seguro de cr√©dito a la exportaci√≥n
‚Ä¢ SECREX (Seguro de Cr√©dito a la Exportaci√≥n)
‚Ä¢ Financiamiento pre y post embarque

**Certificaciones Importantes:**
‚Ä¢ ISO 9001, ISO 14001 (calidad y ambiente)
‚Ä¢ Certificados org√°nicos (USDA, EU Organic)
‚Ä¢ Fair Trade (comercio justo)
‚Ä¢ BRC, HACCP (alimentos)

**PROMPERU y Apoyo Estatal:**
‚Ä¢ Misiones comerciales
‚Ä¢ Ruedas de negocios
‚Ä¢ Estudios de mercado gratuitos
‚Ä¢ Capacitaci√≥n exportadora

¬øEn qu√© mercado internacional est√°s interesado?"""
        ]
    },
    
    "tributos": {
        "keywords": ["tributo", "impuesto", "arancel", "igv", "ipm", "isc", "costo", "pagar"],
        "responses": [
            """üí∞ **TRIBUTOS EN COMERCIO EXTERIOR PERUANO:**

**IMPORTACI√ìN - Tributos Principales:**

**1. Ad Valorem (Arancel Base):**
‚Ä¢ Rango: 0% a 17% seg√∫n partida arancelaria
‚Ä¢ Base: Valor CIF (Costo + Seguro + Flete)
‚Ä¢ Consulta: Arancel de Aduanas SUNAT

**2. IGV (Impuesto General a las Ventas):**
‚Ä¢ Tasa: 18%
‚Ä¢ Base: (CIF + Ad Valorem + ISC)
‚Ä¢ Aplica a todas las importaciones

**3. IPM (Impuesto de Promoci√≥n Municipal):**
‚Ä¢ Tasa: 2%
‚Ä¢ Base: Misma que IGV
‚Ä¢ Solo en importaciones

**4. ISC (Impuesto Selectivo al Consumo):**
‚Ä¢ Solo productos espec√≠ficos
‚Ä¢ Combustibles, licores, cigarrillos, veh√≠culos, etc.
‚Ä¢ Tasas variables seg√∫n producto

**C√ÅLCULO EJEMPLO:**
Producto: Valor CIF $1,000
- Ad Valorem (6%): $60
- Base IGV: $1,060
- IGV (18%): $190.80
- IPM (2%): $21.20
- **Total tributos: $271.20**

**EXPORTACI√ìN:**
‚Ä¢ Generalmente 0% de tributos
‚Ä¢ Beneficios: Drawback, devoluci√≥n IGV

¬øNecesitas calcular tributos para un producto espec√≠fico?""",
            
            """üßÆ **OPTIMIZACI√ìN TRIBUTARIA EN COMERCIO EXTERIOR:**

**Estrategias de Ahorro Legal:**

**1. Aprovecha Acuerdos Comerciales:**
‚Ä¢ TLC Per√∫-China: Reducci√≥n progresiva aranceles
‚Ä¢ TLC Per√∫-USA: Muchos productos 0%
‚Ä¢ Alianza del Pac√≠fico: Preferencias regionales
‚Ä¢ CAN: Productos andinos liberados

**2. Reg√≠menes Aduaneros Especiales:**
‚Ä¢ **Drawback:** Devoluci√≥n 4% valor FOB exportado
‚Ä¢ **Admisi√≥n Temporal:** Suspensi√≥n tributos (maquinaria)
‚Ä¢ **CETICOS:** Zonas francas con beneficios
‚Ä¢ **Reposici√≥n Franquicia:** Insumos para exportaci√≥n

**3. Clasificaci√≥n Arancelaria Correcta:**
‚Ä¢ Asesor√≠a profesional evita sobrecostos
‚Ä¢ Consultas vinculantes a SUNAT
‚Ä¢ Revisi√≥n peri√≥dica de partidas arancelarias

**4. INCOTERMS Estrat√©gicos:**
‚Ä¢ **FOB:** Control sobre flete y seguro
‚Ä¢ **CIF:** Facilita c√°lculo de tributos
‚Ä¢ **EXW:** M√≠nima responsabilidad vendedor

**5. Planificaci√≥n Financiera:**
‚Ä¢ Garant√≠as nominativas vs efectivo
‚Ä¢ Financiamiento de tributos
‚Ä¢ Cronograma de pagos optimizado

**Herramientas SUNAT Gratuitas:**
‚Ä¢ Simulador de tributos
‚Ä¢ Consulta de partidas arancelarias
‚Ä¢ Calculadora de drawback

¬øQuieres que analicemos la optimizaci√≥n para tu producto espec√≠fico?"""
        ]
    },
    
    "empresas": {
        "keywords": ["empresa", "constituir", "sociedad", "ruc", "sunarp", "negocio"],
        "responses": [
            """üè¢ **CONSTITUCI√ìN DE EMPRESAS EN PER√ö:**

**Tipos de Sociedades M√°s Comunes:**

**1. SAC (Sociedad An√≥nima Cerrada):**
‚Ä¢ 2-20 accionistas m√°ximo
‚Ä¢ Capital m√≠nimo: Sin monto m√≠nimo
‚Ä¢ Ideal para: Empresas familiares, PYMEs
‚Ä¢ Responsabilidad limitada al capital aportado

**2. SRL (Sociedad de Responsabilidad Limitada):**
‚Ä¢ 2-20 socios m√°ximo
‚Ä¢ Participaciones en lugar de acciones
‚Ä¢ Gesti√≥n m√°s flexible que SAC
‚Ä¢ Popular para comercio exterior

**3. EIRL (Empresa Individual de Resp. Limitada):**
‚Ä¢ Un solo titular
‚Ä¢ Capital separado del patrimonio personal
‚Ä¢ Ideal para importadores/exportadores individuales

**Proceso de Constituci√≥n:**
1Ô∏è‚É£ **Reserva de nombre** (SUNARP)
2Ô∏è‚É£ **Elaboraci√≥n de minuta** (abogado)
3Ô∏è‚É£ **Escritura p√∫blica** (notario)
4Ô∏è‚É£ **Inscripci√≥n SUNARP** (Registros P√∫blicos)
5Ô∏è‚É£ **RUC en SUNAT**
6Ô∏è‚É£ **Licencia municipal**

**Costos Aproximados:**
‚Ä¢ Reserva nombre: S/ 20
‚Ä¢ Minuta: S/ 300-500
‚Ä¢ Escritura p√∫blica: S/ 150-300
‚Ä¢ SUNARP: S/ 80-120
‚Ä¢ **Total aprox: S/ 550-940**

¬øQu√© tipo de sociedad te conviene m√°s para tu negocio?""",
            
            """üìã **EMPRESAS PARA COMERCIO EXTERIOR - GU√çA ESPECIALIZADA:**

**Consideraciones Especiales para ComEx:**

**Actividades Econ√≥micas CIIU:**
‚Ä¢ 4690: Venta al por mayor no especializada
‚Ä¢ 4610: Venta al por mayor por cuenta propia
‚Ä¢ 4649: Comercio al por mayor de otros enseres

**RUC y Habilitaciones:**
‚Ä¢ RUC activo obligatorio
‚Ä¢ Clave SOL para tr√°mites online
‚Ä¢ Representante legal autorizado
‚Ä¢ Domicilio fiscal actualizado

**Capital Social Recomendado:**
‚Ä¢ **Importaci√≥n:** M√≠nimo S/ 10,000-50,000
‚Ä¢ **Exportaci√≥n:** Desde S/ 5,000
‚Ä¢ **Mixto:** S/ 20,000-100,000
‚Ä¢ Considera garant√≠as aduaneras

**Documentos Corporativos Clave:**
‚Ä¢ Estatuto con objeto social amplio
‚Ä¢ Poder para representante legal
‚Ä¢ Libro de actas actualizado
‚Ä¢ Estados financieros auditados (grandes vol√∫menes)

**Obligaciones Tributarias:**
‚Ä¢ R√©gimen General vs MYPE Tributario
‚Ä¢ Libros contables seg√∫n facturaci√≥n
‚Ä¢ Declaraciones mensuales y anuales
‚Ä¢ Detracciones en operaciones

**Aspectos Bancarios:**
‚Ä¢ Cuentas en moneda extranjera
‚Ä¢ L√≠neas de cr√©dito comercial
‚Ä¢ Cartas de cr√©dito documentarias
‚Ä¢ Seguros de mercanc√≠a

**Normativa Especial:**
‚Ä¢ Ley contra lavado de activos
‚Ä¢ Reporte de operaciones sospechosas (UIF)
‚Ä¢ Beneficiario final identificado

¬øNecesitas asesor√≠a sobre alg√∫n aspecto espec√≠fico de tu futura empresa?"""
        ]
    },

    "documentos": {
        "keywords": ["documento", "certificado", "papel", "tr√°mite", "permiso", "licencia"],
        "responses": [
            """üìÑ **DOCUMENTOS ESENCIALES EN COMERCIO EXTERIOR:**

**IMPORTACI√ìN - Documentos B√°sicos:**
‚Ä¢ **Factura Comercial:** Detalle de mercanc√≠a y valores
‚Ä¢ **Packing List:** Lista de empaque detallada
‚Ä¢ **B/L o AWB:** Conocimiento de embarque/gu√≠a a√©rea
‚Ä¢ **P√≥liza de Seguro:** Cobertura de mercanc√≠a
‚Ä¢ **Certificado de Origen:** Preferencias arancelarias

**Documentos Seg√∫n Producto:**

**üçé ALIMENTOS:**
‚Ä¢ Certificado sanitario pa√≠s origen
‚Ä¢ Registro DIGESA del importador
‚Ä¢ Habilitaci√≥n de establecimiento
‚Ä¢ An√°lisis bromatol√≥gico

**üå± PRODUCTOS AGR√çCOLAS:**
‚Ä¢ Certificado fitosanitario
‚Ä¢ Permiso fitosanitario SENASA
‚Ä¢ Tratamientos cuarentenarios
‚Ä¢ Certificado org√°nico (si aplica)

**üöó VEH√çCULOS:**
‚Ä¢ Certificado de conformidad
‚Ä¢ Homologaci√≥n vehicular (MTC)
‚Ä¢ Certificado de emisiones
‚Ä¢ Seguro obligatorio (SOAT)

**üíä MEDICAMENTOS:**
‚Ä¢ Registro sanitario DIGEMID
‚Ä¢ Certificado de Buenas Pr√°cticas
‚Ä¢ Autorizaci√≥n de importaci√≥n
‚Ä¢ Receta m√©dica (controlados)

**üìã Tips Importantes:**
‚Ä¢ Documentos en espa√±ol o traducidos
‚Ä¢ Legalizaci√≥n consular seg√∫n pa√≠s
‚Ä¢ Vigencias actualizadas
‚Ä¢ Copias certificadas de respaldo

¬øNecesitas informaci√≥n espec√≠fica sobre documentos para tu producto?"""
        ]
    }
}

# Respuestas generales mejoradas
GENERAL_RESPONSES = [
    """¬°Hola! Soy ComexBot, tu asistente especializado en **comercio exterior peruano**. 

üöÄ **Puedo ayudarte con:**
‚Ä¢ Importaci√≥n y exportaci√≥n paso a paso
‚Ä¢ C√°lculo de tributos y aranceles  
‚Ä¢ Constituci√≥n de empresas comerciales
‚Ä¢ Documentaci√≥n y certificados
‚Ä¢ Reg√≠menes aduaneros especiales
‚Ä¢ Optimizaci√≥n de costos

üí° **Pregunta espec√≠fica:** "¬øC√≥mo importar desde China?" o "¬øCu√°nto cuesta exportar quinua?"

¬øEn qu√© tema espec√≠fico te gustar√≠a que te asesore?""",
    
    """Perfecto, est√°s en el lugar correcto para **comercio exterior peruano**. 

üéØ **Temas populares:**
‚Ä¢ "Requisitos para importar productos electr√≥nicos"
‚Ä¢ "Pasos para exportar alimentos procesados" 
‚Ä¢ "C√≥mo calcular tributos de importaci√≥n"
‚Ä¢ "Documentos necesarios para DIGESA"
‚Ä¢ "Beneficios del Drawback"

üìä **Soy especialista en:**
‚Ä¢ Procedimientos SUNAT actualizados
‚Ä¢ TLCs y preferencias arancelarias
‚Ä¢ Reg√≠menes especiales (CETICOS, Admisi√≥n Temporal)
‚Ä¢ Optimizaci√≥n tributaria legal

¬øSobre qu√© aspecto espec√≠fico necesitas asesor√≠a?""",
]

# Funciones de IA Local Mejoradas
def normalize_text(text: str) -> str:
    """Normaliza texto para mejor matching"""
    return re.sub(r'[^\w\s]', ' ', text.lower()).strip()

def calculate_intent_score(message: str, keywords: List[str]) -> float:
    """Calcula score de intenci√≥n basado en keywords"""
    normalized_msg = normalize_text(message)
    words = normalized_msg.split()
    
    matches = 0
    for keyword in keywords:
        for word in words:
            if keyword in word or word in keyword:
                matches += 1
    
    return matches / len(words) if words else 0

def find_best_intent(message: str) -> tuple:
    """Encuentra la mejor intenci√≥n con score"""
    normalized_msg = normalize_text(message)
    
    # Verificar saludos primero
    greeting_words = ["hola", "buenos", "buenas", "saludos", "hey", "hi", "start"]
    if any(word in normalized_msg for word in greeting_words):
        return "greeting", 1.0
    
    # Buscar mejor intenci√≥n en knowledge base
    best_intent = None
    max_score = 0
    
    for intent, data in KNOWLEDGE_BASE.items():
        score = calculate_intent_score(message, data["keywords"])
        if score > max_score:
            max_score = score
            best_intent = intent
    
    # Solo retornar intenci√≥n si score es significativo
    if max_score > 0.1:  # Threshold m√≠nimo
        return best_intent, max_score
    
    return "general", 0.3

def generate_smart_response(intent: str, score: float, original_message: str) -> tuple:
    """Genera respuesta inteligente con confianza"""
    
    if intent == "greeting":
        response = random.choice([
            "¬°Hola! üëã Bienvenido a ComexBot. Soy tu especialista en comercio exterior peruano. ¬øEn qu√© puedo ayudarte hoy?",
            "¬°Excelente d√≠a! Estoy aqu√≠ para asesorarte en importaci√≥n, exportaci√≥n y todo lo relacionado con comercio exterior. ¬øCu√°l es tu consulta?",
            "¬°Saludos! Soy ComexBot, tu asistente experto en SUNAT, aduanas y comercio internacional. ¬øQu√© necesitas saber?"
        ])
        return response, 0.9
    
    if intent == "general":
        response = random.choice(GENERAL_RESPONSES)
        return response, 0.5
    
    if intent in KNOWLEDGE_BASE:
        responses = KNOWLEDGE_BASE[intent]["responses"]
        response = random.choice(responses)
        return response, min(0.9, score + 0.3)
    
    # Fallback response
    response = """No estoy seguro de c√≥mo ayudarte con esa consulta espec√≠fica. 

Soy especialista en **comercio exterior peruano**. Puedo asesorarte sobre:
‚Ä¢ Importaci√≥n y exportaci√≥n
‚Ä¢ Tributos y aranceles
‚Ä¢ Documentaci√≥n aduanera  
‚Ä¢ Constituci√≥n de empresas
‚Ä¢ Reg√≠menes especiales

¬øPodr√≠as reformular tu pregunta sobre alguno de estos temas?"""
    
    return response, 0.3

# Mantener funciones originales para compatibilidad
def generate_simple_response(query: str, content: str) -> str:
    """Genera respuesta simple basada en contenido encontrado de PDFs"""
    snippet = content[:400].strip()
    
    response = f"""üìã **Informaci√≥n encontrada en documentos:**

{snippet}...

üí° **¬øTe ayuda esta informaci√≥n?** Si necesitas m√°s detalles espec√≠ficos sobre alg√∫n aspecto, preg√∫ntame directamente.

ü§ñ Tambi√©n puedo ayudarte con consultas generales sobre comercio exterior sin necesidad de documentos espec√≠ficos."""
    
    return response

def generate_fallback_response(query: str) -> str:
    """Genera respuestas por defecto cuando no hay documentos relevantes"""
    intent, score = find_best_intent(query)
    response, confidence = generate_smart_response(intent, score, query)
    return response

# Inicializaci√≥n mejorada
def initialize_services():
    """Inicializa servicios con mejor manejo de errores"""
    global pdf_service
    
    try:
        print("üöÄ Iniciando ComexBot API Gratuito Ilimitado...")
        print("üí° Sistema h√≠brido: PDFs + IA Local gratuita")
        
        if PDF_SERVICE_AVAILABLE:
            print("üìö Intentando cargar sistema de documentos...")
            try:
                pdf_service = PDFService(
                    pdf_directory="data/pdfs",
                    cache_directory="data/cache"
                )
                loaded_count = pdf_service.load_all_pdfs()
                print(f"‚úÖ {loaded_count} documento(s) PDF cargado(s)")
            except Exception as e:
                print(f"‚ö†Ô∏è PDFs no disponibles: {e}")
                pdf_service = None
        else:
            print("‚ö†Ô∏è Servicio PDF no disponible - Solo IA local")
        
        print("üß† Sistema de IA local activado")
        print("‚úÖ ComexBot listo - Conversaciones ilimitadas")
        
        return True
        
    except Exception as e:
        logger.error(f"Error inicializando servicios: {e}")
        print(f"‚ùå Error: {e}")
        print("‚ö†Ô∏è Sistema iniciado con funcionalidad limitada")
        return False

# Evento de inicio
@app.on_event("startup")
async def startup_event():
    """Se ejecuta al iniciar la aplicaci√≥n"""
    initialize_services()

# Endpoints mejorados
@app.get("/")
async def root():
    """Endpoint ra√≠z con informaci√≥n de la API"""
    global pdf_service
    
    pdf_status = "‚úÖ Disponible" if pdf_service else "‚ö†Ô∏è No disponible"
    
    return {
        "message": "ComexBot API - Comercio Exterior Per√∫",
        "version": "2.0.0",
        "status": "üöÄ Funcionando",
        "features": [
            "‚úÖ Conversaciones ilimitadas",
            "‚úÖ IA local gratuita", 
            "‚úÖ Sin APIs de pago",
            "‚úÖ Disponible 24/7"
        ],
        "services": {
            "ai_local": "‚úÖ Activa",
            "pdf_service": pdf_status
        },
        "endpoints": {
            "chat": "/chat - Conversaci√≥n principal",
            "search": "/search - B√∫squeda en documentos", 
            "health": "/health - Estado del sistema",
            "stats": "/stats - Estad√≠sticas de uso"
        }
    }

@app.get("/health")
async def health_check():
    """Endpoint de salud mejorado"""
    global pdf_service
    
    pdf_service_status = "available" if pdf_service is not None else "unavailable"
    vectorstores_count = len(pdf_service.vectorstores) if pdf_service else 0
    
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "services": {
            "ai_local": "active",
            "pdf_service": pdf_service_status,
            "vectorstores": vectorstores_count,
            "knowledge_base_topics": len(KNOWLEDGE_BASE)
        },
        "system": {
            "unlimited_conversations": True,
            "free_apis_only": True,
            "cost_per_message": 0.0
        }
    }

@app.get("/stats")
async def get_stats():
    """Estad√≠sticas del sistema"""
    global pdf_service
    
    return {
        "knowledge_base": {
            "total_topics": len(KNOWLEDGE_BASE),
            "available_topics": list(KNOWLEDGE_BASE.keys()),
            "total_responses": sum(len(topic["responses"]) for topic in KNOWLEDGE_BASE.values())
        },
        "pdf_service": {
            "status": "available" if pdf_service else "unavailable", 
            "documents": len(pdf_service.vectorstores) if pdf_service else 0
        },
        "system": {
            "service_type": "Completamente gratuito",
            "ai_type": "IA Local + B√∫squeda en documentos",
            "conversation_limit": "Ilimitado",
            "cost_structure": "Sin costos por mensaje"
        }
    }

@app.post("/chat", response_model=ChatResponse)
async def chat_endpoint(request: ChatMessage):
    """Endpoint de chat mejorado - IA local + documentos opcionales"""
    global pdf_service
    
    try:
        query = request.message.strip()
        
        if not query:
            return ChatResponse(
                response="Por favor env√≠a un mensaje para poder ayudarte.",
                confidence=0.3,
                sources=[]
            )
        
        # PRIMERA OPCI√ìN: Buscar en documentos PDF si est√°n disponibles
        if pdf_service is not None and len(pdf_service.vectorstores) > 0:
            try:
                results = pdf_service.search_documents(query=query, k=3)
                
                if results and len(results) > 0:
                    # Usar el contenido encontrado
                    best_match = results[0]
                    content = best_match['content']
                    source_pdf = best_match['source_pdf']
                    
                    # Generar respuesta basada en documento + IA local
                    pdf_response = generate_simple_response(query, content)
                    
                    return ChatResponse(
                        response=pdf_response,
                        confidence=0.85,
                        sources=[source_pdf]
                    )
            except Exception as e:
                logger.warning(f"Error en b√∫squeda PDF: {e}")
        
        # SEGUNDA OPCI√ìN: IA Local (siempre disponible)
        intent, score = find_best_intent(query)
        response, confidence = generate_smart_response(intent, score, query)
        
        return ChatResponse(
            response=response,
            confidence=confidence,
            sources=["IA Local - ComexBot"]
        )
        
    except Exception as e:
        logger.error(f"Error en chat: {e}")
        return ChatResponse(
            response="Disculpa, ocurri√≥ un error t√©cnico. ¬øPodr√≠as intentar reformular tu consulta sobre comercio exterior?",
            confidence=0.3,
            sources=[]
        )

# Mantener endpoints originales para compatibilidad
@app.post("/search", response_model=QueryResponse)
async def search_documents(request: QueryRequest):
    """Busca documentos basado en una consulta"""
    global pdf_service
    
    if pdf_service is None:
        raise HTTPException(
            status_code=503, 
            detail="Servicio de documentos PDF no disponible. Usa /chat para consultas generales."
        )
    
    try:
        results = pdf_service.search_documents(
            query=request.query,
            pdf_names=request.pdf_names,
            k=request.max_results
        )
        
        return QueryResponse(
            results=results,
            total_results=len(results),
            query=request.query
        )
        
    except Exception as e:
        logger.error(f"Error en b√∫squeda: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Error processing search: {str(e)}"
        )

@app.get("/info")
async def get_info():
    """Obtiene informaci√≥n sobre el sistema"""
    global pdf_service
    
    if pdf_service is None:
        return {
            "pdf_service": "No disponible",
            "ai_local": "‚úÖ Disponible",
            "message": "Sistema funcionando con IA local - Consultas ilimitadas disponibles"
        }
    
    return pdf_service.get_vectorstore_info()

# Endpoint adicional para testing
@app.post("/test-intent")
async def test_intent(message: str):
    """Endpoint para probar detecci√≥n de intenciones"""
    intent, score = find_best_intent(message)
    response, confidence = generate_smart_response(intent, score, message)
    
    return {
        "message": message,
        "detected_intent": intent,
        "intent_score": score,
        "response_confidence": confidence,
        "response_preview": response[:100] + "..." if len(response) > 100 else response
    }

# Manejo de errores global
@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    """Manejador global de errores mejorado"""
    logger.error(f"Error no manejado: {exc}")
    return JSONResponse(
        status_code=500,
        content={
            "error": "Error interno del sistema",
            "message": "El sistema sigue funcionando. Intenta reformular tu consulta sobre comercio exterior.",
            "support": "Sistema gratuito sin l√≠mites - errores ocasionales son normales"
        }
    )

if __name__ == "__main__":
    import uvicorn